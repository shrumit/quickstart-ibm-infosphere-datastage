{
	"AWSTemplateFormatVersion": "2010-09-09",
	"Description": "Create DataStage InfoSphere Kubernetes nodes. This template creates EC2 instances and related resources. You will be billed for the AWS resources used if you create a stack from this template.",
	"Parameters": {
		"AllowedPublicCIDR": {
			"AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
			"ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/16-28",
			"Description": "The CIDR IP range that is permitted to access the cluster. We recommend that you set this value to a trusted IP range.",
			"Type": "String"
		},
		"DataStageClientSecurityGroupID": {
			"Description": "DataStage Client Security Group",
			"Type": "AWS::EC2::SecurityGroup::Id"
		},
		"EFSID": {
			"Description": "ID of the Elastic File System to be mounted to the cluster",
			"Type": "String"
		},
		"IBMClientNumber": {
			"AllowedPattern": "[0-9]+",
			"Description": "ICN associated with your license",
			"Type": "String"
		},
		"IBMPartNumber": {
			"AllowedValues": [
				"D1VLALL",
				"D1P3RLL"
			],
			"Description": "Part Number associated with your license",
			"Type": "String"
		},
		"IISPassword": {
			"Description": "Password to be set on the DataStage application for the username \"isadmin\"",
			"Type": "String",
			"MinLength": "8",
			"MaxLength": "20",
			"NoEcho": "true",
			"AllowedPattern": "(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[\\p{Punct}])([0-9a-zA-Z\\p{Punct}]+)",
			"ConstraintDescription": "Must be 8-20 characters, containing one number, one special character, one lower case and one upper case character."
		},
		"k8sMasterInstanceType": {
			"AllowedValues": [
				"t3.micro",
				"t3.small",
				"t3.medium",
				"t3.large",
				"t3.xlarge"
			],
			"ConstraintDescription": "Must contain valid instance type",
			"Default": "t3.medium",
			"Description": "Type of EC2 instance for the Kubernetes master nodes",
			"Type": "String"
		},
		"k8sWorkerInstanceType": {
			"AllowedValues": [
				"t3.xlarge",
				"t3.2xlarge",
				"m5.large",
				"m5.xlarge",
				"m5.2xlarge",
				"m5.4xlarge",
				"c5.xlarge",
				"c5.2xlarge",
				"c5.4xlarge",
				"c5.9xlarge",
				"r5.large",
				"r5.xlarge",
				"r5.2xlarge",
				"r5.4xlarge"
			],
			"ConstraintDescription": "Must contain valid instance type",
			"Default": "t3.xlarge",
			"Description": "Type of EC2 instance for the Kubernetes worker nodes",
			"Type": "String"
		},
		"KeyPairName": {
			"Description": "The name of an existing public/private key pair, which allows you to securely connect to your instance after it launches",
			"Type": "AWS::EC2::KeyPair::KeyName"
		},
		"LicenseAgreement": {
			"Description": "I have read and agree to the license terms for IBM DataStage (https://www-03.ibm.com/software/sla/sladb.nsf/displaylis/846A896D3565B3D8852582AC00693B87?OpenDocument).",
			"Type": "String",
			"Default": "-",
			"AllowedValues": [
				"I agree",
				"-"
			]
		},
		"MasterNLB": {
			"Description": "Amazon Resource Name of Kubernetes load balancer for Master instance proxy",
			"Default": "arn:aws:elasticloadbalancing:ap-southeast-1:299743145002:loadbalancer/net/dsclient-master/ffab39eb067d208e",
			"Type": "String"
		},
		"MasterNLBDomainName": {
			"Description": "Amazon Resource Name of Kubernetes load balancer",
			"Default": "dsclient-master-ffab39eb067d208e.elb.ap-southeast-1.amazonaws.com",
			"Type": "String"
		},
		"NumberOfAZs": {
			"AllowedValues": [
				"2",
				"3"
			],
			"Default": "3",
			"Description": "Number of Availability Zones to use in the VPC. This must match the number of selections in the Availability Zones parameter.",
			"Type": "String"
		},
		"OrderID": {
			"AllowedPattern": "[a-z0-9]+",
			"ConstraintDescription": "Non-empty; lower case letters and numbers",
			"Default": "ds1",
			"Description": "Will be used for naming resources and the DataStage Kubernetes namespace. Ensure that every deployment on your AWS account uses a unique Order ID.",
			"Type": "String"
		},
		"PrivateSubnet1ID": {
			"Description": "ID of private subnet in Availability Zone 1",
			"Type": "AWS::EC2::Subnet::Id"
		},
		"PrivateSubnet2ID": {
			"Description": "ID of private subnet in Availability Zone 2",
			"Type": "AWS::EC2::Subnet::Id"
		},
		"PrivateSubnet3ID": {
			"Description": "ID of private subnet in Availability Zone 3. If number of AZs is 2, a subnet must be selected to proceed but will be ignored.",
			"Type": "AWS::EC2::Subnet::Id"
		},
		"VPCID": {
			"Description": "ID of your existing VPC for deployment",
			"Type": "AWS::EC2::VPC::Id"
		}
	},
	"Conditions": {
		"3AZCondition": {
			"Fn::Equals": [
				{ "Ref": "NumberOfAZs" },
				"3"
			]
		}
	},
	"Mappings": {
		"AWSAMIRegionMap": {
			"eu-north-1": { "RHEL75HVM": "ami-5c39b622" },
			"ap-south-1": { "RHEL75HVM": "ami-0aa4317636e016115" },
			"eu-west-3": { "RHEL75HVM": "ami-039346fed23fb53ad" },
			"eu-west-2": { "RHEL75HVM": "ami-0ac5fae255ddac6f6" },
			"eu-west-1": { "RHEL75HVM": "ami-092acf20fad7f7795" },
			"ap-northeast-2": { "RHEL75HVM": "ami-0d226f15e3e46903a" },
			"ap-northeast-1": { "RHEL75HVM": "ami-0b517025bb2f0ad4a" },
			"sa-east-1": { "RHEL75HVM": "ami-01c56172f9db84834" },
			"ca-central-1": { "RHEL75HVM": "ami-fc20ad98" },
			"ap-southeast-1": { "RHEL75HVM": "ami-09fc728e15fbfb535" },
			"ap-southeast-2": { "RHEL75HVM": "ami-0a61d60bde3940420" },
			"eu-central-1": { "RHEL75HVM": "ami-05ba90b00a46d83fa" },
			"us-east-1": { "RHEL75HVM": "ami-0394fe9914b475c53" },
			"us-east-2": { "RHEL75HVM": "ami-0376bbf9be9eac670" },
			"us-west-1": { "RHEL75HVM": "ami-0bdc0ff10fb093057" },
			"us-west-2": { "RHEL75HVM": "ami-096510cab1b6b2c6d" }
		}
	},
	"Rules": {
		"LicenseAgreementRule": {
			"Assertions": [{
				"Assert": {
					"Fn::Contains": [
						["I agree"],
						{ "Ref": "LicenseAgreement" }
					]
				},
				"AssertDescription": "User must agree to the terms of the license agreement."
			}]
		}
	},
	"Resources": {
		"k8sMasterRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"AssumeRolePolicyDocument": {
					"Statement": [{
						"Effect": "Allow",
						"Principal": {
							"Service": [
								"ec2.amazonaws.com"
							]
						},
						"Action": [
							"sts:AssumeRole"
						]
					}]
				},
				"Path": "/",
				"Policies": [{
						"PolicyDocument": {
							"Version": "2012-10-17",
							"Statement": [{
								"Action": [
									"ssm:PutParameter",
									"ssm:GetParameter",
									"ssm:GetParameters",
									"ssm:GetParametersByPath"
								],
								"Effect": "Allow",
								"Resource": { "Fn::Sub": "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${OrderID}/*" }
							}]
						},
						"PolicyName": { "Fn::Sub": "${OrderID}-EC2ParameterStoreBasic" }
					},
					{
						"PolicyDocument": {
							"Version": "2012-10-17",
							"Statement": [{
								"Action": [
									"s3:GetObject",
									"s3:PutObject",
									"s3:ListBucket"
								],
								"Resource": [
									{ "Fn::Sub": "arn:aws:s3:::datastage-backup/*" },
									{ "Fn::Sub": "arn:aws:s3:::datastage-backup" }
								],
								"Effect": "Allow"
							}]
						},
						"PolicyName": { "Fn::Sub": "${OrderID}-S3GetPut" }
					}
				]
			}
		},
		"k8sMasterProfile": {
			"Type": "AWS::IAM::InstanceProfile",
			"Properties": {
				"Path": "/",
				"Roles": [
					{ "Ref": "k8sMasterRole" }
				]
			}
		},
		"k8sMasterSecurityGroup": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"GroupDescription": "Allow access to the DataStage Server instances",
				"VpcId": {
					"Ref": "VPCID"
				},
				"SecurityGroupIngress": [
					{ "IpProtocol": "tcp", "FromPort": 32500, "ToPort": 32500, "CidrIp": { "Ref": "AllowedPublicCIDR" } },
					{ "IpProtocol": "tcp", "FromPort": 22, "ToPort": 22, "CidrIp": { "Ref": "AllowedPublicCIDR" } },
					{ "IpProtocol": "tcp", "FromPort": 32500, "ToPort": 32500, "SourceSecurityGroupId": { "Ref": "DataStageClientSecurityGroupID" } },
					{ "IpProtocol": "tcp", "FromPort": 22, "ToPort": 22, "SourceSecurityGroupId": { "Ref": "DataStageClientSecurityGroupID" } }
				]
			}
		},
		"k8sMasterSGIngress1": {
			"Type": "AWS::EC2::SecurityGroupIngress",
			"Properties": {
				"GroupId": { "Ref": "k8sMasterSecurityGroup" },
				"IpProtocol": "-1",
				"SourceSecurityGroupId": { "Ref": "k8sMasterSecurityGroup" }
			}
		},
		"k8sMasterSGIngress2": {
			"Type": "AWS::EC2::SecurityGroupIngress",
			"Properties": {
				"GroupId": { "Ref": "k8sMasterSecurityGroup" },
				"IpProtocol": "-1",
				"SourceSecurityGroupId": { "Ref": "k8sWorkerSecurityGroup" }
			}
		},
		"k8sWorkerSecurityGroup": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"GroupDescription": "Allow access to the DataStage Server instances",
				"VpcId": {
					"Ref": "VPCID"
				}
			}
		},
        "k8sWorkerSGIngress1": {
			"Type": "AWS::EC2::SecurityGroupIngress",
			"Properties": {
				"GroupId": { "Ref": "k8sWorkerSecurityGroup" },
				"IpProtocol": "-1",
				"SourceSecurityGroupId": { "Ref": "k8sWorkerSecurityGroup" }
			}
		},
        "k8sWorkerSGIngress2": {
			"Type": "AWS::EC2::SecurityGroupIngress",
			"Properties": {
				"GroupId": { "Ref": "k8sWorkerSecurityGroup" },
				"IpProtocol": "-1",
				"SourceSecurityGroupId": { "Ref": "k8sMasterSecurityGroup" }
			}
		},
		"k8sMaster1Instance": {
			"Type": "AWS::EC2::Instance",
			"Properties": {
				"BlockDeviceMappings": [{
					"DeviceName": "/dev/sda1",
					"Ebs": {
						"VolumeSize": "110",
						"VolumeType": "gp2"
					}
				}, {
					"DeviceName": "/dev/sdf",
					"Ebs": {
						"Encrypted": "true",
						"VolumeSize": "110",
						"VolumeType": "gp2"
					}
				}],
				"IamInstanceProfile": { "Ref": "k8sMasterProfile" },
				"InstanceType": { "Ref": "k8sMasterInstanceType" },
				"SecurityGroupIds": [
					{ "Ref": "k8sMasterSecurityGroup" }
				],
				"SubnetId": { "Ref": "PrivateSubnet1ID" },
				"LaunchTemplate": {
					"LaunchTemplateId": { "Ref": "CommonLaunchTemplate" },
					"Version": { "Fn::GetAtt": ["CommonLaunchTemplate", "DefaultVersionNumber"] }
				},
				"Tags": [{
					"Key": "Name",
					"Value": { "Fn::Sub": "${OrderID}-k8s-master1" }
				}],
				"SourceDestCheck": "false",
				"UserData": {
					"Fn::Base64": {
						"Fn::Join": [
							"",
							[
								"#!/bin/bash\n",
								"\n",
								"# Master index is hard-coded here \n",
								"echo '1' > /var/MASTER_IDX \n",
								"\n",
								"# Install aws-cfn \n",
								"yum install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm \n",
								"curl -O https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.amzn1.noarch.rpm \n",
								"yum install -y aws-cfn-bootstrap-latest.amzn1.noarch.rpm \n",
								"export PYTHONPATH=${PYTHONPATH}:/usr/local/lib/python2.7/site-packages\n",
								"\n",
								"/opt/aws/bin/cfn-init",
								" --stack ", { "Ref": "AWS::StackName" },
								" --resource CommonLaunchTemplate",
								" --configsets primaryMaster",
								" --region ", { "Ref": "AWS::Region" }, "\n",
								"\n",
								"/opt/aws/bin/cfn-signal -e $? ",
								" --stack ", { "Ref": "AWS::StackName" },
								" --resource k8sMaster1Instance ",
								" --region ", { "Ref": "AWS::Region" }, "\n"
							]
						]
					}
				}
			}
		},
		"k8sMaster2Instance": {
			"Type": "AWS::EC2::Instance",
			"Properties": {
				"BlockDeviceMappings": [{
					"DeviceName": "/dev/sda1",
					"Ebs": {
						"VolumeSize": "110",
						"VolumeType": "gp2"
					}
				}, {
					"DeviceName": "/dev/sdf",
					"Ebs": {
						"Encrypted": "true",
						"VolumeSize": "110",
						"VolumeType": "gp2"
					}
				}],
				"IamInstanceProfile": { "Ref": "k8sMasterProfile" },
				"InstanceType": { "Ref": "k8sMasterInstanceType" },
				"SecurityGroupIds": [
					{ "Ref": "k8sMasterSecurityGroup" }
				],
				"SubnetId": { "Ref": "PrivateSubnet2ID" },
				"LaunchTemplate": {
					"LaunchTemplateId": { "Ref": "CommonLaunchTemplate" },
					"Version": { "Fn::GetAtt": ["CommonLaunchTemplate", "DefaultVersionNumber"] }
				},
				"Tags": [{
					"Key": "Name",
					"Value": { "Fn::Sub": "${OrderID}-k8s-master2" }
				}],
				"SourceDestCheck": "false",
				"UserData": {
					"Fn::Base64": {
						"Fn::Join": [
							"",
							[
								"#!/bin/bash\n",
								"\n",
								"# Master index is hard-coded here \n",
								"echo '2' > /var/MASTER_IDX \n",
								"\n",
								"# Install aws-cfn \n",
								"yum install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm \n",
								"curl -O https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.amzn1.noarch.rpm \n",
								"yum install -y aws-cfn-bootstrap-latest.amzn1.noarch.rpm \n",
								"export PYTHONPATH=${PYTHONPATH}:/usr/local/lib/python2.7/site-packages\n",
								"\n",
								"/opt/aws/bin/cfn-init",
								" --stack ", { "Ref": "AWS::StackName" },
								" --resource CommonLaunchTemplate",
								" --configsets secondaryMaster",
								" --region ", { "Ref": "AWS::Region" }, "\n",
								"\n",
								"/opt/aws/bin/cfn-signal -e $? ",
								" --stack ", { "Ref": "AWS::StackName" },
								" --resource k8sMaster2Instance ",
								" --region ", { "Ref": "AWS::Region" }, "\n"
							]
						]
					}
				}
			}
		},
		"k8sMaster3Instance": {
			"Type": "AWS::EC2::Instance",
			"Properties": {
				"BlockDeviceMappings": [{
					"DeviceName": "/dev/sda1",
					"Ebs": {
						"VolumeSize": "110",
						"VolumeType": "gp2"
					}
				}, {
					"DeviceName": "/dev/sdf",
					"Ebs": {
						"Encrypted": "true",
						"VolumeSize": "110",
						"VolumeType": "gp2"
					}
				}],
				"IamInstanceProfile": { "Ref": "k8sMasterProfile" },
				"InstanceType": { "Ref": "k8sMasterInstanceType" },
				"SecurityGroupIds": [
					{ "Ref": "k8sMasterSecurityGroup" }
				],
				"SubnetId": { "Ref": "PrivateSubnet3ID" },
				"LaunchTemplate": {
					"LaunchTemplateId": { "Ref": "CommonLaunchTemplate" },
					"Version": { "Fn::GetAtt": ["CommonLaunchTemplate", "DefaultVersionNumber"] }
				},
				"Tags": [{
					"Key": "Name",
					"Value": { "Fn::Sub": "${OrderID}-k8s-master3" }
				}],
				"SourceDestCheck": "false",
				"UserData": {
					"Fn::Base64": {
						"Fn::Join": [
							"",
							[
								"#!/bin/bash\n",
								"\n",
								"# Master index is hard-coded here \n",
								"echo '3' > /var/MASTER_IDX \n",
								"\n",
								"# Install aws-cfn \n",
								"yum install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm \n",
								"curl -O https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.amzn1.noarch.rpm \n",
								"yum install -y aws-cfn-bootstrap-latest.amzn1.noarch.rpm \n",
								"export PYTHONPATH=${PYTHONPATH}:/usr/local/lib/python2.7/site-packages\n",
								"\n",
								"/opt/aws/bin/cfn-init",
								" --stack ", { "Ref": "AWS::StackName" },
								" --resource CommonLaunchTemplate",
								" --configsets secondaryMaster",
								" --region ", { "Ref": "AWS::Region" }, "\n",
								"\n",
								"/opt/aws/bin/cfn-signal -e $? ",
								" --stack ", { "Ref": "AWS::StackName" },
								" --resource k8sMaster2Instance ",
								" --region ", { "Ref": "AWS::Region" }, "\n"
							]
						]
					}
				}
			}
		},
		"k8sWorker1Instance": {
			"Type": "AWS::EC2::Instance",
			"Properties": {
				"BlockDeviceMappings": [{
					"DeviceName": "/dev/sda1",
					"Ebs": {
						"VolumeSize": "110",
						"VolumeType": "gp2"
					}
				}, {
					"DeviceName": "/dev/sdf",
					"Ebs": {
						"Encrypted": "true",
						"VolumeSize": "110",
						"VolumeType": "gp2"
					}
				}],
				"IamInstanceProfile": { "Ref": "k8sMasterProfile" },
				"InstanceType": { "Ref": "k8sWorkerInstanceType" },
				"SecurityGroupIds": [
					{ "Ref": "k8sWorkerSecurityGroup" }
				],
				"SubnetId": { "Ref": "PrivateSubnet1ID" },
				"LaunchTemplate": {
					"LaunchTemplateId": { "Ref": "CommonLaunchTemplate" },
					"Version": { "Fn::GetAtt": ["CommonLaunchTemplate", "DefaultVersionNumber"] }
				},
				"Tags": [{
						"Key": "Name",
						"Value": { "Fn::Sub": "${OrderID}-k8s-worker1" }
					},
					{
						"Key": "WorkerNumber",
						"Value": "1"
					}
				],
				"SourceDestCheck": "false",
				"UserData": {
					"Fn::Base64": {
						"Fn::Join": [
							"",
							[
								"#!/bin/bash\n",
								"\n",
								"# Install aws-cfn \n",
								"yum install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm \n",
								"curl -O https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.amzn1.noarch.rpm \n",
								"yum install -y aws-cfn-bootstrap-latest.amzn1.noarch.rpm \n",
								"export PYTHONPATH=${PYTHONPATH}:/usr/local/lib/python2.7/site-packages\n",
								"\n",
								"/opt/aws/bin/cfn-init",
								" --stack ", { "Ref": "AWS::StackName" },
								" --resource CommonLaunchTemplate",
								" --configsets worker",
								" --region ", { "Ref": "AWS::Region" }, "\n",
								"\n",
								"/opt/aws/bin/cfn-signal -e $? ",
								" --stack ", { "Ref": "AWS::StackName" },
								" --resource k8sWorker1Instance ",
								" --region ", { "Ref": "AWS::Region" }, "\n"
							]
						]
					}
				}
			}
		},
		"k8sWorker2Instance": {
			"Type": "AWS::EC2::Instance",
			"Properties": {
				"BlockDeviceMappings": [{
					"DeviceName": "/dev/sda1",
					"Ebs": {
						"VolumeSize": "110",
						"VolumeType": "gp2"
					}
				}, {
					"DeviceName": "/dev/sdf",
					"Ebs": {
						"Encrypted": "true",
						"VolumeSize": "110",
						"VolumeType": "gp2"
					}
				}],
				"IamInstanceProfile": { "Ref": "k8sMasterProfile" },
				"InstanceType": { "Ref": "k8sWorkerInstanceType" },
				"SecurityGroupIds": [
					{ "Ref": "k8sWorkerSecurityGroup" }
				],
				"SubnetId": { "Ref": "PrivateSubnet1ID" },
				"LaunchTemplate": {
					"LaunchTemplateId": { "Ref": "CommonLaunchTemplate" },
					"Version": { "Fn::GetAtt": ["CommonLaunchTemplate", "DefaultVersionNumber"] }
				},
				"Tags": [{
						"Key": "Name",
						"Value": { "Fn::Sub": "${OrderID}-k8s-worker2" }
					},
					{
						"Key": "WorkerNumber",
						"Value": "2"
					}
				],
				"SourceDestCheck": "false",
				"UserData": {
					"Fn::Base64": {
						"Fn::Join": [
							"",
							[
								"#!/bin/bash\n",
								"\n",
								"# Install aws-cfn \n",
								"yum install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm \n",
								"curl -O https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.amzn1.noarch.rpm \n",
								"yum install -y aws-cfn-bootstrap-latest.amzn1.noarch.rpm \n",
								"export PYTHONPATH=${PYTHONPATH}:/usr/local/lib/python2.7/site-packages\n",
								"\n",
								"/opt/aws/bin/cfn-init",
								" --stack ", { "Ref": "AWS::StackName" },
								" --resource CommonLaunchTemplate",
								" --configsets worker",
								" --region ", { "Ref": "AWS::Region" }, "\n",
								"\n",
								"/opt/aws/bin/cfn-signal -e $? ",
								" --stack ", { "Ref": "AWS::StackName" },
								" --resource k8sWorker2Instance ",
								" --region ", { "Ref": "AWS::Region" }, "\n"
							]
						]
					}
				}
			}
		},
		"CommonLaunchTemplate": {
			"Type": "AWS::EC2::LaunchTemplate",
			"Metadata": {
				"AWS::CloudFormation::Init": {
					"configSets": {
						"primaryMaster": ["install_common_packages", "install_master_packages", "mount_ebs", "mount_efs", "install_aws_cli", "set_passwordless_master", "update_datastageinfo", "download_installer", "install_datastage"],
						"secondaryMaster": ["install_common_packages", "install_master_packages", "mount_ebs", "mount_efs", "install_aws_cli", "set_passwordless_worker", "download_installer"],
						"worker": ["install_common_packages", "mount_ebs", "mount_efs", "install_aws_cli", "set_passwordless_worker"]
					},
					"install_common_packages": {
						"packages": {
							"yum": {
								"nano": [],
								"nfs-utils": [],
								"nmap-ncat": []
							}
						}
					},
					"install_master_packages": {
						"packages": {
							"yum": {
								"bind-utils": [],
								"wget": [],
								"firewalld": [],
								"redhat-lsb-core": [],
								"net-tools": [],
								"jq": []
							}
						}
					},
					"mount_ebs": {
						"files": {
							"/tmp/mount_ebs.sh": {
								"content": {
									"Fn::Join": ["", [
										"#!/bin/bash -e \n",
										"# CURRENTLY ONLY WORKS WITH NVME-EBS INSTANCE TYPES \n",
										"mkdir /disk1\n",
										"mkfs -t xfs /dev/nvme1n1\n",
										"mount /dev/nvme1n1 /disk1\n",
										"UUID=$(blkid /dev/nvme1n1 -s UUID -o value)\n",
										"echo \"UUID=$UUID  /disk1  xfs  defaults,nofail  0  2\" >> /etc/fstab \n"
									]]
								},
								"mode": "000744",
								"owner": "root",
								"group": "root"
							}
						},
						"commands": {
							"0": {
								"command": "/tmp/mount_ebs.sh"
							}
						}
					},
					"mount_efs": {
						"files": {
							"/tmp/mount_efs.sh": {
								"content": {
									"Fn::Join": ["", [
										"#!/bin/bash -e \n",
										"mkdir -p /efs\n",
										{ "Fn::Sub": "mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport ${EFSID}.efs.${AWS::Region}.amazonaws.com:/ /efs\n" },
										{ "Fn::Sub": "echo '${EFSID}.efs.${AWS::Region}.amazonaws.com:/  /efs  nfs4  nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport,_netdev  0  0' >> /etc/fstab\n" },
										"mount --bind /efs /mnt \n",
										"echo '/efs  /mnt  none  bind' >> /etc/fstab\n"
									]]
								},
								"mode": "000744",
								"owner": "root",
								"group": "root"
							}
						},
						"commands": {
							"0": {
								"command": "/tmp/mount_efs.sh"
							}
						}
					},
					"install_aws_cli": {
						"files": {
							"/tmp/install_aws_cli.sh": {
								"content": {
									"Fn::Join": ["", [
										"#!/bin/bash \n",
										"# install AWS CLI\n",
										"cd /tmp\n",
										"yum install -y unzip\n",
										"curl 'https://s3.amazonaws.com/aws-cli/awscli-bundle.zip' -o 'awscli-bundle.zip'\n",
										"unzip awscli-bundle.zip\n",
										"./awscli-bundle/install -i /usr/aws -b /usr/bin/aws\n",
										"mkdir -p /root/.aws/\n",
										"echo '[default]' > /root/.aws/config\n",
										{ "Fn::Sub": "echo 'region = ${AWS::Region}' >> /root/.aws/config \n" },
										"\n"
									]]
								},
								"mode": "000744",
								"owner": "root",
								"group": "root"
							}
						},
						"commands": {
							"0": {
								"command": "/tmp/install_aws_cli.sh",
								"cwd": "/tmp"
							}
						}
					},
					"set_passwordless_master": {
						"files": {
							"/tmp/passwordless_master.sh": {
								"content": {
									"Fn::Join": ["", [
										"#!/bin/bash -e \n",
										"# Produce RSA key, append to authorized_keys and put in Parameter Store\n",
										"yes y | ssh-keygen -q -f /root/.ssh/id_rsa -N '' > /dev/null \n",
										"cp /root/.ssh/authorized_keys /root/.ssh/authorized_keys.orig \n",
										"cat /root/.ssh/id_rsa.pub >> /root/.ssh/authorized_keys \n",
										"systemctl restart sshd \n",
										{ "Fn::Sub": "aws ssm put-parameter --name /${OrderID}/master_rsa --type SecureString --value \"$(cat /root/.ssh/id_rsa.pub)\" \n" }
									]]
								},
								"mode": "000744",
								"owner": "root",
								"group": "root"
							}
						},
						"commands": {
							"0": {
								"command": "/tmp/passwordless_master.sh"
							}
						}
					},
					"set_passwordless_worker": {
						"files": {
							"/tmp/passwordless_worker.sh": {
								"content": {
									"Fn::Join": ["", [
										"#!/bin/bash -e \n",
										"# Retrieve RSA key and append to authorized_keys\n",
										{ "Fn::Sub": "while ! aws ssm get-parameter --name /${OrderID}/master_rsa --with-decryption --query Parameter.Value --output text >> /root/.ssh/authorized_keys; do sleep 5; done \n" },
										"systemctl restart sshd \n"
									]]
								},
								"mode": "000744",
								"owner": "root",
								"group": "root"
							}
						},
						"commands": {
							"0": {
								"command": "/tmp/passwordless_worker.sh"
							}
						}
					},
					"update_datastageinfo": {
						"files": {
							"/disk1/quickstart/datastageinfo_partial.json": {
								"content": {
									"licenseAccepted": "yes",
									"namespace": { "Ref": "OrderID" },
									"numberOfNodes": "3",
									"distributedFileSystemType": "nfs",
									"distributedDataDir": "/efs",
									"distributedFileServer": "<master-host-fqdn>",
									"enginePvSize": "100Gi",
									"repositoryPvSize": "100Gi",
									"servicesPvSize": "50Gi",
									"dockerRegistryPvSize": "50Gi",
									"dockerRegistryPath": "registry/data",
									"isMeteringEnabled": "no",
									"iisPassword": { "Ref": "IISPassword" },
									"loadBalancerIP": "",
									"masterNodeHosts": [{
											"privateIP": "",
											"name": ""
										},
										{
											"privateIP": "",
											"name": ""
										},
										{
											"privateIP": "",
											"name": ""
										}
									],
									"workerNodeHosts": [{
											"label": "is-repository",
											"name": "<worker-host2-fqdn>"
										},
										{
											"label": "is-engine",
											"name": "<worker-host3-fqdn>"
										}
									]
								}
							},
							"/tmp/datastageinfo_updater.sh": {
								"content": {
									"Fn::Join": ["", [
										"#!/bin/bash -e \n",
										{ "Fn::Sub": "NLB=${MasterNLBDomainName}\n" },
										"NLB=$(echo $NLB | tr '[:upper:]' '[:lower:]')\n",
										"MASTER1=$(curl -s http://169.254.169.254/latest/meta-data/local-hostname)\n",
										"MASTER1_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n",
										{ "Fn::Sub": "while ! MASTER2=$(aws ssm get-parameter --name /${OrderID}/master2_fqdn --query Parameter.Value --output text); do sleep 5; done \n" },
										{ "Fn::Sub": "while ! MASTER2_IP=$(aws ssm get-parameter --name /${OrderID}/master2_ip --query Parameter.Value --output text); do sleep 5; done \n" },
										{ "Fn::Sub": "while ! MASTER3=$(aws ssm get-parameter --name /${OrderID}/master3_fqdn --query Parameter.Value --output text); do sleep 5; done \n" },
										{ "Fn::Sub": "while ! MASTER3_IP=$(aws ssm get-parameter --name /${OrderID}/master3_ip --query Parameter.Value --output text); do sleep 5; done \n" },
										{ "Fn::Sub": "while ! WORKER1=$(aws ssm get-parameter --name /${OrderID}/worker1_fqdn --query Parameter.Value --output text); do sleep 5; done \n" },
										{ "Fn::Sub": "while ! WORKER1_IP=$(aws ssm get-parameter --name /${OrderID}/worker1_ip --query Parameter.Value --output text); do sleep 5; done \n" },
										{ "Fn::Sub": "while ! WORKER2=$(aws ssm get-parameter --name /${OrderID}/worker2_fqdn --query Parameter.Value --output text); do sleep 5; done \n" },
										{ "Fn::Sub": "while ! WORKER2_IP=$(aws ssm get-parameter --name /${OrderID}/worker2_ip --query Parameter.Value --output text); do sleep 5; done \n" },
										"cat /disk1/quickstart/datastageinfo_partial.json             |",
										" jq \".distributedFileServer=\\\"$MASTER1\\\"\"            |",
										" jq \".loadBalancerIP=\\\"$NLB\\\"\"            |",
										" jq \".masterNodeHosts[0].name=\\\"$MASTER3\\\"\"          |",
										" jq \".masterNodeHosts[0].privateIP=\\\"$MASTER3_IP\\\"\"  |",
										" jq \".masterNodeHosts[1].name=\\\"$MASTER2\\\"\"          |",
										" jq \".masterNodeHosts[1].privateIP=\\\"$MASTER2_IP\\\"\"  |",
										" jq \".masterNodeHosts[2].name=\\\"$MASTER1\\\"\"          |",
										" jq \".masterNodeHosts[2].privateIP=\\\"$MASTER1_IP\\\"\"  |",
										" jq \".workerNodeHosts[0].name=\\\"$WORKER1\\\"\"          |",
										" jq \".workerNodeHosts[0].privateIP=\\\"$WORKER1_IP\\\"\"  |",
										" jq \".workerNodeHosts[1].name=\\\"$WORKER2\\\"\"          |",
										" jq \".workerNodeHosts[1].privateIP=\\\"$WORKER2_IP\\\"\"  |",
										" jq . > /disk1/quickstart/datastageinfo.json \n"
									]]
								},
								"mode": "000744",
								"owner": "root",
								"group": "root"
							}
						},
						"commands": {
							"0": {
								"command": "/tmp/datastageinfo_updater.sh"
							}
						}
					},
					"download_installer": {
						"files": {
							"/tmp/download_installer.sh": {
								"content": {
									"Fn::Join": ["", [
										"#!/bin/bash \n",
										{ "Fn::Sub": "while ! RESPONSE=\"$(curl -s --fail -d \"{\\\"icn\\\":\\\"$1\\\", \\\"part_number\\\":\\\"$2\\\", \\\"region\\\":\\\"${AWS::Region}\\\"}\" -H 'Content-Type: application/json' -X POST https://onpd230guk.execute-api.ca-central-1.amazonaws.com/default/microservice/)\"; do sleep 5; done \n" },
										"echo $RESPONSE > /tmp/api_response.txt \n",
										"DIRPATH=/disk1/quickstart/installer\n",
										"mkdir -p $DIRPATH\n",
										"N_FILES=$(echo $RESPONSE | jq '.assets | length')\n",
										"for ((i = 0 ; i < N_FILES ; i++ )); do \n",
										"  echo $RESPONSE | jq -r \".assets[$i] | \\\"$DIRPATH/\\\" + .key + \\\" \\\" + .url\"  | xargs -n 2 bash -c 'curl -s -o $0 $1' & \n",
										"  PIDS[$i]=$! \n",
										"done \n",
										"for PID in ${PIDS[*]}; do \n",
										"  wait $PID\n",
										"done\n",
										"# chmod +x $DIRPATH/install_script.sh\n",
										"if [ ! -f $DIRPATH/ds-docker-11.7.0.2-1.0.tar.gz ]; then\n",
										"  mv $DIRPATH/ds-docker-11.7.0.2-1.0*.tar.gz $DIRPATH/ds-docker-11.7.0.2-1.0.tar.gz\n",
										"fi\n",
										"if [ ! -f $DIRPATH/DS-Kube-Installer-11.7.tar.gz ]; then\n",
										"  mv $DIRPATH/DS-Kube-Installer-11.7*.tar.gz $DIRPATH/DS-Kube-Installer-11.7.tar.gz\n",
										"fi\n",
										"cd $DIRPATH\n",
										"tar -xzf DS-Kube-Installer-11.7.tar.gz\n"
									]]
								},
								"mode": "000744",
								"owner": "root",
								"group": "root"
							}
						},
						"commands": {
							"0": {
								"command": { "Fn::Sub": "/tmp/download_installer.sh ${IBMClientNumber} ${IBMPartNumber}" },
								"env": { "HOME": "/root" }
							}
						}
					},
					"install_datastage": {
						"files": {
							"/tmp/install_script.sh": {
								"content": {
									"Fn::Join": ["", [
										"#!/bin/bash -e \n",
										"export HOSTNAME=$(curl -s http://169.254.169.254/latest/meta-data/local-hostname)\n",
										"env > /cfn-env.txt\n",
										"mv $1/datastageinfo.json $1/datastageinfo.json.orig \n",
										"cp $2 $1 \n",
										"cd $1\n",
										"#./deployMultiNode.sh &> ./install_log \n"
									]]
								},
								"mode": "000744",
								"owner": "root",
								"group": "root"
							}
						},
						"commands": {
							"0": {
								"command": "/tmp/install_script.sh /disk1/quickstart/installer/DS-Kube-Installer /disk1/quickstart/datastageinfo.json",
								"env": { "HOME": "/root", "PATH": "/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin", "SHELL": "/bin/bash", "USER": "root", "USERNAME": "root" }
							}
						}
					}
				}
			},
			"Properties": {
				"LaunchTemplateName": { "Fn::Sub": "${OrderID}-CommonLT" },
				"LaunchTemplateData": {
					"ImageId": {
						"Fn::FindInMap": [
							"AWSAMIRegionMap", { "Ref": "AWS::Region" }, "RHEL75HVM"
						]
					},
					"KeyName": { "Ref": "KeyPairName" },
					"UserData": {
						"Fn::Base64": {
							"Fn::Join": [
								"",
								[
									"#!/bin/bash\n",
									"\n",
									"touch /TEMPLATE_RAN \n",
									"# Install aws-cfn \n",
									"yum install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm \n",
									"curl -O https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.amzn1.noarch.rpm \n",
									"yum install -y aws-cfn-bootstrap-latest.amzn1.noarch.rpm \n",
									"export PYTHONPATH=${PYTHONPATH}:/usr/local/lib/python2.7/site-packages\n"
								]
							]
						}
					}
				}
			}
		},
		"ProxyTargetGroup": {
			"Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
			"Properties": {
				"HealthCheckPort": "32500",
				"Name": { "Fn::Sub": "${OrderID}-ProxyTG" },
				"Port": "32500",
				"Protocol": "TCP",
				"Targets": [{
						"Id": { "Ref": "k8sMaster1Instance" },
						"Port": "32500"
					},
					{
						"Id": { "Ref": "k8sMaster2Instance" },
						"Port": "32500"
					},
					{
						"Id": { "Ref": "k8sMaster3Instance" },
						"Port": "32500"
					}
				],
				"VpcId": { "Ref": "VPCID" }
			}
		},
		"ProxyListener": {
			"Type": "AWS::ElasticLoadBalancingV2::Listener",
			"Properties": {
				"DefaultActions": [{
					"Type": "forward",
					"TargetGroupArn": { "Ref": "ProxyTargetGroup" }
				}],
				"LoadBalancerArn": { "Ref": "MasterNLB" },
				"Port": "32500",
				"Protocol": "TCP"
			}
		},
		"MasterTargetGroup": {
			"Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
			"Properties": {
				"HealthCheckPort": "6443",
				"HealthCheckIntervalSeconds": 10,
				"Name": { "Fn::Sub": "${OrderID}-Master" },
				"Port": "6443",
				"Protocol": "TCP",
				"Targets": [{
						"Id": { "Ref": "k8sMaster1Instance" },
						"Port": "6443"
					},
					{
						"Id": { "Ref": "k8sMaster2Instance" },
						"Port": "6443"
					},
					{
						"Id": { "Ref": "k8sMaster3Instance" },
						"Port": "6443"
					}
				],
				"VpcId": { "Ref": "VPCID" }
			}
		},
		"MasterListener": {
			"Type": "AWS::ElasticLoadBalancingV2::Listener",
			"Properties": {
				"DefaultActions": [{
					"Type": "forward",
					"TargetGroupArn": { "Ref": "MasterTargetGroup" }
				}],
				"LoadBalancerArn": { "Ref": "MasterNLB" },
				"Port": "6443",
				"Protocol": "TCP"
			}
		},
		"SSHTargetGroup": {
			"Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
			"Properties": {
				"HealthCheckPort": "22",
				"HealthCheckIntervalSeconds": 10,
				"Name": { "Fn::Sub": "${OrderID}-SSH" },
				"Port": "22",
				"Protocol": "TCP",
				"Targets": [{
					"Id": { "Ref": "k8sMaster1Instance" },
					"Port": "22"
				}],
				"VpcId": { "Ref": "VPCID" }
			}
		},
		"SSHListener": {
			"Type": "AWS::ElasticLoadBalancingV2::Listener",
			"Properties": {
				"DefaultActions": [{
					"Type": "forward",
					"TargetGroupArn": { "Ref": "SSHTargetGroup" }
				}],
				"LoadBalancerArn": { "Ref": "MasterNLB" },
				"Port": "22",
				"Protocol": "TCP"
			}
		},
		"k8sMaster1FQDN": {
			"Type": "AWS::SSM::Parameter",
			"Properties": {
				"Name": { "Fn::Sub": "/${OrderID}/master1_fqdn" },
				"Type": "String",
				"Value": {
					"Fn::GetAtt": ["k8sMaster1Instance", "PrivateDnsName"]
				}
			}
		},
		"k8sMaster2FQDN": {
			"Type": "AWS::SSM::Parameter",
			"Properties": {
				"Name": { "Fn::Sub": "/${OrderID}/master2_fqdn" },
				"Type": "String",
				"Value": { "Fn::GetAtt": ["k8sMaster2Instance", "PrivateDnsName"] }
			}
		},
		"k8sMaster3FQDN": {
			"Type": "AWS::SSM::Parameter",
			"Properties": {
				"Name": { "Fn::Sub": "/${OrderID}/master3_fqdn" },
				"Type": "String",
				"Value": { "Fn::GetAtt": ["k8sMaster3Instance", "PrivateDnsName"] }
			}
		},
		"k8sWorker1FQDN": {
			"Type": "AWS::SSM::Parameter",
			"Properties": {
				"Name": { "Fn::Sub": "/${OrderID}/worker1_fqdn" },
				"Type": "String",
				"Value": { "Fn::GetAtt": ["k8sWorker1Instance", "PrivateDnsName"] }
			}
		},
		"k8sWorker2FQDN": {
			"Type": "AWS::SSM::Parameter",
			"Properties": {
				"Name": { "Fn::Sub": "/${OrderID}/worker2_fqdn" },
				"Type": "String",
				"Value": {
					"Fn::GetAtt": ["k8sWorker2Instance", "PrivateDnsName"]
				}
			}
		},
		"k8sMaster1IP": {
			"Type": "AWS::SSM::Parameter",
			"Properties": {
				"Name": { "Fn::Sub": "/${OrderID}/master1_ip" },
				"Type": "String",
				"Value": {
					"Fn::GetAtt": ["k8sMaster1Instance", "PrivateIp"]
				}
			}
		},
		"k8sMaster2IP": {
			"Type": "AWS::SSM::Parameter",
			"Properties": {
				"Name": { "Fn::Sub": "/${OrderID}/master2_ip" },
				"Type": "String",
				"Value": {
					"Fn::GetAtt": ["k8sMaster2Instance", "PrivateIp"]
				}
			}
		},
		"k8sMaster3IP": {
			"Type": "AWS::SSM::Parameter",
			"Properties": {
				"Name": { "Fn::Sub": "/${OrderID}/master3_ip" },
				"Type": "String",
				"Value": {
					"Fn::GetAtt": ["k8sMaster3Instance", "PrivateIp"]
				}
			}
		},
		"k8sWorker1IP": {
			"Type": "AWS::SSM::Parameter",
			"Properties": {
				"Name": { "Fn::Sub": "/${OrderID}/worker1_ip" },
				"Type": "String",
				"Value": {
					"Fn::GetAtt": ["k8sWorker1Instance", "PrivateIp"]
				}
			}
		},
		"k8sWorker2IP": {
			"Type": "AWS::SSM::Parameter",
			"Properties": {
				"Name": { "Fn::Sub": "/${OrderID}/worker2_ip" },
				"Type": "String",
				"Value": {
					"Fn::GetAtt": ["k8sWorker2Instance", "PrivateIp"]
				}
			}
		}
	}
}
